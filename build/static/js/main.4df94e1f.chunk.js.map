{"version":3,"sources":["store/auth/types.ts","store/auth/reducer.ts","store/loadingState.ts","store/boards/types.ts","store/boards/reducer.ts","store/mode.ts","store/lists/types.ts","store/lists/reducer.ts","store/cards/types.ts","store/cards/reducer.ts","models/card.ts","store/createCard/reducer.ts","store/createCard/types.ts","store/rootReducer.ts","store/auth/actions.ts","store/router/actions.ts","store/auth/saga.ts","store/boards/actions.ts","models/board.ts","models/list.ts","store/lists/actions.ts","store/boards/saga.ts","store/rootSelector.ts","store/auth/selectors.ts","store/boards/selectors.ts","store/createCard/selectors.ts","store/lists/saga.ts","store/cards/actions.ts","store/createCard/actions.ts","store/cards/saga.ts","store/rootSaga.ts","services/index.ts","services/http.ts","services/api/apiAuth.ts","services/api/apiBoard.ts","services/api/apiList.ts","services/api/apiCard.ts","serviceWorker.ts","hooks/useCustomDispatch.ts","components/Auth/Auth.tsx","components/MainPage/MainPage.tsx","components/Preloader/Preloader.tsx","components/Auth/AuthSuccess/AuthSuccess.tsx","hooks/useCustomSelector.ts","components/LoadBoardsWithLists/LoadBoardsWithListsContainer.tsx","components/Auth/Logout/Logout.tsx","components/ListBoardsPage/ListBoardsPage.tsx","components/ListBoardsPage/ListBoardsPageContainer.tsx","components/LoadCards/LoadCardsContainer.tsx","components/BoardPage/CardList/EditCardButton/EditCardButton.tsx","components/BoardPage/CardList/EditCardButton/EditCardButtonContainer.tsx","components/Modal/Modal.tsx","components/BoardPage/CardList/DeleteCardButton/DeleteCardButton.tsx","components/BoardPage/CardList/DeleteCardButton/DeleteCardButtonContainer.tsx","components/BoardPage/CardList/Card/Card.tsx","components/BoardPage/CardList/Card/CardContainer.tsx","components/BoardPage/CardList/CreateCardButton/CreateCardButton.tsx","components/BoardPage/CardList/CreateCardButton/CreateCardButtonContainer.tsx","components/BoardPage/CardList/NameCardForm/NameCardForm.tsx","components/BoardPage/CardList/EditCardForm/EditCardFormContainer.tsx","components/BoardPage/CardList/CreateCardForm/CreateCardFormContainer.tsx","components/BoardPage/CardList/CardList.tsx","components/BoardPage/CardList/CardListContainer.tsx","components/BoardPage/ListList/List/List.tsx","components/BoardPage/ListList/List/ListContainer.tsx","components/BoardPage/ListList/ListList.tsx","components/BoardPage/ListList/ListListContainer.tsx","components/BoardPage/NavBar/SelectBoard/SelectBoard.tsx","components/BoardPage/NavBar/SelectBoard/SelectBoardContainer.tsx","components/BoardPage/NavBar/NavBar.tsx","components/BoardPage/BoardPage.tsx","components/BoardPage/BoardPageContainer.tsx","App.tsx","index.tsx"],"names":["REDIRECT_TO_API_FOR_GET_TOKEN","LOGIN_BY_TOKEN","LOGOUT_BY_TOKEN","LoadingState","initialState","idMember","token","key","reducer","state","action","type","types","LOAD_BOARDS","Mode","initialItem","boardsLoadingState","isNotLoaded","collection","Map","StoreBoardRecord","Record","boards","forEach","item","setIn","id","set","isLoaded","isError","updateIn","CREATE_LIST","UPDATE_LIST","DELETE_LIST","SORT_LIST","lists","mode","list","delete","sort","a","b","pos","LOAD_CARDS_FOR_BOARD","CREATE_CARD","UPDATE_CARD","DELETE_CARD","SORT_CARD","cards","card","idList","name","viewing","Card","createRootReducer","history","combineReducers","router","connectRouter","auth","createCard","redirectToApiForGetToken","loginByToken","loginByTokenSuccess","logoutByToken","redirectToAuthForGetToken","document","location","href","redirectToBoard","idBoard","push","redirectToAuthForGetTokenAsync","loginByTokenAsync","logoutByTokenAsync","authSaga","console","error","services","call","container","ApiAuth","apiGetIdMemberByToken","localStorage","setItem","put","apiDeleteToken","removeItem","Error","takeEvery","loadBoards","loadBoardsError","addBoards","setCardsLoaded","loadCardsForBoardError","cardsLoadingState","Board","List","addLists","updateListSuccess","deleteListSuccess","sortByPosition","sortList","newIndex","oldIndex","loadBoardsAsync","boardSaga","ApiBoard","loadBoardsWithListsForIdMember","getItem","apiBoardsWithLists","map","board","flat","propsFirstSelector","_","prop","authState","boardState","createSelector","boardsGetBoardsLoadingState","boardsGetBoards","boardsGetBoardById","get","listState","listsGetListsByIdBoard","filter","listsGetById","find","cardState","cardsGetCardsByIdList","cardsGetById","createCardState","createCardGetIdList","createListAsync","updateListAsync","deleteListAsync","sortListAsync","listSaga","ApiList","create","update","toJS","getPositionByIndex","index","skip","first","select","newPosition","size","fixFromTopToBottom","prevListPosition","nextListPosition","merge","apiList","addCards","loadCardsForBoard","setMode","updateCard","updateCardSuccess","deleteCard","deleteCardSuccess","sortCard","setName","setIdList","deleteCreateCard","loadCardsForBoardAsync","createCardAsync","updateCardAsync","deleteCardAsync","sortCardAsync","cardSaga","ApiCard","fixMoveBetweenLists","prevCardPosition","nextCardPosition","apiCard","bottle","Bottle","service","url","data","request","post","method","process","REACT_APP_API_KEY","parameters","Object","keys","join","fetch","then","response","json","http","_value","this","keepFromSource","Boolean","window","hostname","match","useCustomDispatch","useDispatch","Auth","dispatch","className","onClick","MainPage","target","Preloader","domElement","getElementById","ReactDOM","createPortal","AuthSuccess","useLocation","hash","replace","useEffect","useCustomSelector","selector","arg","useSelector","LoadBoardsWithListsContainer","isLoading","Logout","ListBoardsPage","props","to","valueSeq","ListBoardsPageContainer","LoadCardsContainer","EditCardButton","handleSetModeEditing","EditCardButtonContainer","idCard","editing","Modal","title","onClose","children","DeleteCardButton","showModal","handleCloseModal","handleConfirmationDelete","handleButtonDelete","DeleteCardButtonContainer","useState","setShowModal","CardContainer","CreateCardButton","handleShowCreateCardForm","CreateCardButtonContainer","NameCardForm","textInput","useRef","current","focus","value","onChange","e","handleChangeName","placeholder","ref","handleButtonSave","typeSave","handleButtonClose","EditCardFormContainer","setCard","updateCardAction","CreateCardFormContainer","createCardAction","CardList","droppableId","provided","droppableProps","innerRef","draggableId","draggableProps","dragHandleProps","createCardIdList","CardListContainer","ListContainer","ListList","onDragEnd","direction","ListListContainer","result","destination","source","SelectBoard","handleRedirectToBoard","SelectBoardContainer","NavBar","BoardPage","BoardPageContainer","useParams","boardsLoading","App","exact","path","component","createBrowserHistory","basename","packageJson","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","routerMiddleware","run","rootSaga","all","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4df94e1f.chunk.js","sourcesContent":["export const REDIRECT_TO_API_FOR_GET_TOKEN = \"REDIRECT_TO_API_FOR_GET_TOKEN\";\nexport const LOGIN_BY_TOKEN = \"LOGIN_BY_TOKEN\";\nexport const LOGIN_BY_TOKEN_SUCCESS = \"LOGIN_BY_TOKEN_SUCCESS\";\nexport const LOGOUT_BY_TOKEN = \"LOGOUT_BY_TOKEN\";\n","import * as types from \"./types\";\r\nimport * as actions from \"./actions\";\r\nimport { ActionTypesInfer } from \"src/store/actionTypes\";\r\n\r\nexport type TStoreAuth = {\r\n    idMember: string;\r\n    token: string;\r\n    key: string;\r\n};\r\n\r\nconst initialState = {\r\n    idMember: \"\",\r\n    token: \"\",\r\n    key: \"\"\r\n};\r\n\r\nconst reducer = (state: TStoreAuth = initialState, action: ActionTypesInfer<typeof actions>) => {\r\n    switch (action.type) {\r\n        case types.LOGIN_BY_TOKEN:\r\n            return { ...state, token: action.token };\r\n\r\n        case types.LOGIN_BY_TOKEN_SUCCESS:\r\n            return { ...state, idMember: action.idMember };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","export enum LoadingState {\r\n    isNotLoaded,\r\n    isLoading,\r\n    isLoaded,\r\n    isError\r\n}\r\n","export const LOAD_BOARDS = \"LOAD_BOARDS\";\r\nexport const LOAD_BOARDS_ERROR = \"LOAD_BOARDS_ERROR\";\r\nexport const ADD_BOARDS = \"ADD_BOARDS\";\r\nexport const SET_CARDS_LOADED = \"SET_CARDS_LOADED\";\r\nexport const LOAD_CARDS_FOR_BOARD_ERROR = \"LOAD_CARDS_FOR_BOARD_ERROR\";\r\n","import { Map, Record } from \"immutable\";\r\nimport { ActionTypesInfer } from \"src/store/actionTypes\";\r\nimport * as types from \"./types\";\r\nimport * as actions from \"./actions\";\r\nimport Board from \"src/models/board\";\r\nimport { LoadingState } from \"src/store/loadingState\";\r\n\r\nexport interface IStoreBoardRecord {\r\n    boardsLoadingState: LoadingState;\r\n    collection: Map<string, Board>;\r\n}\r\n\r\nconst initialItem: IStoreBoardRecord = {\r\n    boardsLoadingState: LoadingState.isNotLoaded,\r\n    collection: Map([])\r\n};\r\n\r\nclass StoreBoardRecord extends Record(initialItem) implements IStoreBoardRecord {}\r\n\r\nexport type TStoreBoard = StoreBoardRecord;\r\n\r\nconst reducer = (state: TStoreBoard = new StoreBoardRecord(), action: ActionTypesInfer<typeof actions>) => {\r\n    switch (action.type) {\r\n        case types.ADD_BOARDS:\r\n            action.boards.forEach((item: Board) => {\r\n                state = state.setIn([\"collection\", item.id], item);\r\n            });\r\n            return state.set(\"boardsLoadingState\", LoadingState.isLoaded);\r\n\r\n        case types.LOAD_BOARDS_ERROR:\r\n            return state.set(\"boardsLoadingState\", LoadingState.isError);\r\n\r\n        case types.SET_CARDS_LOADED:\r\n            return state.updateIn(\r\n                [\"collection\", action.id],\r\n                item => item && item.set(\"cardsLoadingState\", LoadingState.isLoaded)\r\n            );\r\n\r\n        case types.LOAD_CARDS_FOR_BOARD_ERROR:\r\n            return state.updateIn(\r\n                [\"collection\", action.id],\r\n                item => item && item.set(\"cardsLoadingState\", LoadingState.isError)\r\n            );\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","export enum Mode {\r\n    viewing,\r\n    editing\r\n}\r\n","export const ADD_LISTS = \"ADD_LISTS\";\r\nexport const CREATE_LIST = \"CREATE_LIST\";\r\nexport const UPDATE_LIST = \"UPDATE_LIST\";\r\nexport const UPDATE_LIST_SUCCESS = \"UPDATE_LIST_SUCCESS\";\r\nexport const SET_MODE = \"SET_MODE\";\r\nexport const DELETE_LIST = \"DELETE_LIST\";\r\nexport const DELETE_LIST_SUCCESS = \"DELETE_LIST_SUCCESS\";\r\nexport const SORT_BY_POSITION = \"SORT_BY_POSITION\";\r\nexport const SORT_LIST = \"SORT_LIST\";\r\n","import { Map } from \"immutable\";\r\nimport { ActionTypesInfer } from \"src/store/actionTypes\";\r\nimport * as types from \"./types\";\r\nimport * as actions from \"./actions\";\r\nimport List from \"src/models/list\";\r\n\r\nexport type TStoreList = Map<string, List>;\r\n\r\nconst reducer = (state: TStoreList = Map([]), action: ActionTypesInfer<typeof actions>) => {\r\n    switch (action.type) {\r\n        case types.ADD_LISTS:\r\n            action.lists.forEach((item: List) => {\r\n                state = state.set(item.id, item);\r\n            });\r\n            return state;\r\n\r\n        case types.SET_MODE:\r\n            return state.setIn([action.id, \"mode\"], action.mode);\r\n\r\n        case types.UPDATE_LIST_SUCCESS:\r\n            return state.set(action.list.id, action.list);\r\n\r\n        case types.DELETE_LIST_SUCCESS:\r\n            return state.delete(action.id);\r\n\r\n        case types.SORT_BY_POSITION:\r\n            return state.sort((a: List, b: List) => {\r\n                if (a.pos < b.pos) return -1;\r\n                if (a.pos > b.pos) return 1;\r\n                return 0;\r\n            });\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","export const ADD_CARDS = \"ADD_CARDS\";\r\nexport const LOAD_CARDS_FOR_BOARD = \"LOAD_CARDS_FOR_BOARD\";\r\nexport const CREATE_CARD = \"CREATE_CARD\";\r\nexport const UPDATE_CARD = \"UPDATE_CARD\";\r\nexport const UPDATE_CARD_SUCCESS = \"UPDATE_CARD_SUCCESS\";\r\nexport const SET_MODE = \"SET_MODE\";\r\nexport const DELETE_CARD = \"DELETE_CARD\";\r\nexport const DELETE_CARD_SUCCESS = \"DELETE_CARD_SUCCESS\";\r\nexport const SORT_BY_POSITION = \"SORT_BY_POSITION\";\r\nexport const SORT_CARD = \"SORT_CARD\";\r\n","import { Map } from \"immutable\";\r\nimport { ActionTypesInfer } from \"src/store/actionTypes\";\r\nimport * as types from \"./types\";\r\nimport * as actions from \"./actions\";\r\nimport Card from \"src/models/card\";\r\nimport CardModel from \"src/models/card\";\r\n\r\nexport type TStoreCard = Map<string, Card>;\r\n\r\nconst reducer = (state: TStoreCard = Map([]), action: ActionTypesInfer<typeof actions>) => {\r\n    switch (action.type) {\r\n        case types.ADD_CARDS:\r\n            action.cards.forEach((item: Card) => {\r\n                state = state.set(item.id, item);\r\n            });\r\n            return state;\r\n\r\n        case types.SET_MODE:\r\n            return state.setIn([action.id, \"mode\"], action.mode);\r\n\r\n        case types.UPDATE_CARD_SUCCESS:\r\n            return state.set(action.card.id, action.card);\r\n\r\n        case types.DELETE_CARD_SUCCESS:\r\n            return state.delete(action.id);\r\n\r\n        case types.SORT_BY_POSITION:\r\n            return state.sort((a: CardModel, b: CardModel) => {\r\n                if (a.pos < b.pos) return -1;\r\n                if (a.pos > b.pos) return 1;\r\n                return 0;\r\n            });\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import { Record } from \"immutable\";\r\nimport { Mode } from \"src/store/mode\";\r\n\r\nexport interface ICard {\r\n    id: string;\r\n    idList: string;\r\n    name: string;\r\n    pos: number;\r\n    mode: Mode;\r\n}\r\n\r\nconst initialItem: ICard = {\r\n    id: \"\",\r\n    idList: \"\",\r\n    name: \"\",\r\n    pos: 0,\r\n    mode: Mode.viewing\r\n};\r\n\r\nexport default class Card extends Record(initialItem) implements ICard {}\r\n","import * as types from \"./types\";\r\nimport { ActionTypesInfer } from \"src/store/actionTypes\";\r\nimport * as actions from \"src/store/createCard/actions\";\r\nimport Card from \"src/models/card\";\r\n\r\nexport type TStoreCreateCard = Card;\r\nconst initialState = new Card();\r\n\r\nconst reducer = (state: TStoreCreateCard = initialState, action: ActionTypesInfer<typeof actions>) => {\r\n    switch (action.type) {\r\n        case types.SET_ID_LIST:\r\n            return state.set(\"idList\", action.idList);\r\n\r\n        case types.SET_NAME:\r\n            return state.set(\"name\", action.name);\r\n\r\n        case types.DELETE_CREATE_CARD:\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","export const SET_NAME = \"SET_NAME\";\r\nexport const SET_ID_LIST = \"SET_ID_LIST\";\r\nexport const DELETE_CREATE_CARD = \"DELETE_CREATE_CARD\";\r\n","import { combineReducers } from \"redux\";\r\nimport { connectRouter } from \"connected-react-router\";\r\nimport { History, LocationState } from \"history\";\r\nimport auth, { TStoreAuth } from \"./auth/reducer\";\r\nimport boards, { TStoreBoard } from \"./boards/reducer\";\r\nimport lists, { TStoreList } from \"./lists/reducer\";\r\nimport cards, { TStoreCard } from \"./cards/reducer\";\r\nimport createCard, { TStoreCreateCard } from \"./createCard/reducer\";\r\n\r\nexport interface IStore {\r\n    router: typeof connectRouter;\r\n    auth: TStoreAuth;\r\n    boards: TStoreBoard;\r\n    lists: TStoreList;\r\n    cards: TStoreCard;\r\n    createCard: TStoreCreateCard;\r\n}\r\n\r\nconst createRootReducer = (history: History<LocationState>) =>\r\n    combineReducers({\r\n        router: connectRouter(history),\r\n        auth,\r\n        boards,\r\n        lists,\r\n        cards,\r\n        createCard\r\n    });\r\n\r\nexport default createRootReducer;\r\n","import * as types from \"./types\";\r\n\r\nexport const redirectToApiForGetToken = () =>\r\n    ({\r\n        type: types.REDIRECT_TO_API_FOR_GET_TOKEN\r\n    } as const);\r\n\r\nexport const loginByToken = (token: string) =>\r\n    ({\r\n        type: types.LOGIN_BY_TOKEN,\r\n        token\r\n    } as const);\r\n\r\nexport const loginByTokenSuccess = (idMember: string) =>\r\n    ({\r\n        type: types.LOGIN_BY_TOKEN_SUCCESS,\r\n        idMember\r\n    } as const);\r\n\r\nexport const logoutByToken = (token: string) =>\r\n    ({\r\n        type: types.LOGOUT_BY_TOKEN,\r\n        token\r\n    } as const);\r\n","import { push } from \"connected-react-router\";\r\n\r\nexport const redirectToAuthForGetToken = () => {\r\n    /*    if (process.env.REACT_APP_API_KEY) {\r\n        document.location.href =\r\n            \"https://trello.com/1/authorize?scope=write&expiration=1day&name=TestTrello&return_url=http://localhost:3000/&scope=read&response_type=token&key=\" +\r\n            process.env.REACT_APP_API_KEY;\r\n    } else {\r\n        console.error(\"Not specified env.REACT_APP_API_KEY\");\r\n    }*/\r\n\r\n    document.location.href =\r\n        \"https://trello.com/1/authorize?scope=write&expiration=1day&name=TestTrello&return_url=https://isvk.github.io/trello/build/&scope=read&response_type=token&key=\" +\r\n        \"57dec6bd85b077473d5258dd1f499f7b\";\r\n};\r\n\r\nexport const redirectToBoard = (idBoard: string) => {\r\n    return push(\"/board/\" + idBoard);\r\n};\r\n","import bottle from \"src/services\";\r\nimport { put, call, takeEvery } from \"@redux-saga/core/effects\";\r\nimport * as types from \"./types\";\r\nimport { loginByToken, loginByTokenSuccess, logoutByToken } from \"./actions\";\r\nimport { redirectToAuthForGetToken } from \"src/store/router/actions\";\r\nimport { push } from \"connected-react-router\";\r\n\r\nfunction* redirectToAuthForGetTokenAsync() {\r\n    try {\r\n        yield redirectToAuthForGetToken();\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}\r\n\r\nfunction* loginByTokenAsync(services: typeof bottle, action: ReturnType<typeof loginByToken>) {\r\n    try {\r\n        const idMember = yield call(services.container.ApiAuth.apiGetIdMemberByToken, action.token);\r\n\r\n        localStorage.setItem(\"token\", action.token);\r\n        localStorage.setItem(\"idMember\", idMember);\r\n\r\n        yield put(loginByTokenSuccess(idMember));\r\n        yield put(push(\"/board\"));\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}\r\n\r\nfunction* logoutByTokenAsync(services: typeof bottle, action: ReturnType<typeof logoutByToken>) {\r\n    try {\r\n        const response = yield call(services.container.ApiAuth.apiDeleteToken, action.token);\r\n\r\n        if (response) {\r\n            localStorage.removeItem(\"token\");\r\n            localStorage.removeItem(\"idMember\");\r\n            yield put(push(\"/\"));\r\n        } else {\r\n            throw new Error(\"Error logout\");\r\n        }\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}\r\n\r\nexport default function* authSaga(services: typeof bottle) {\r\n    yield takeEvery(types.REDIRECT_TO_API_FOR_GET_TOKEN, redirectToAuthForGetTokenAsync);\r\n    yield takeEvery(types.LOGIN_BY_TOKEN, loginByTokenAsync, services);\r\n    yield takeEvery(types.LOGOUT_BY_TOKEN, logoutByTokenAsync, services);\r\n}\r\n","import * as types from \"./types\";\r\nimport Board from \"src/models/board\";\r\n\r\nexport const loadBoards = () =>\r\n    ({\r\n        type: types.LOAD_BOARDS\r\n    } as const);\r\n\r\nexport const loadBoardsError = () =>\r\n    ({\r\n        type: types.LOAD_BOARDS_ERROR\r\n    } as const);\r\n\r\nexport const addBoards = (boards: Board[]) =>\r\n    ({\r\n        type: types.ADD_BOARDS,\r\n        boards\r\n    } as const);\r\n\r\nexport const setCardsLoaded = (id: string) =>\r\n    ({\r\n        type: types.SET_CARDS_LOADED,\r\n        id\r\n    } as const);\r\n\r\nexport const loadCardsForBoardError = (id: string) =>\r\n    ({\r\n        type: types.LOAD_CARDS_FOR_BOARD_ERROR,\r\n        id\r\n    } as const);\r\n","import { Record } from \"immutable\";\r\nimport { LoadingState } from \"src/store/loadingState\";\r\n\r\nexport interface IBoard {\r\n    id: string;\r\n    name: string;\r\n    cardsLoadingState: LoadingState;\r\n}\r\n\r\nconst initialItem: IBoard = {\r\n    id: \"\",\r\n    name: \"\",\r\n    cardsLoadingState: LoadingState.isNotLoaded\r\n};\r\n\r\nexport default class Board extends Record(initialItem) implements IBoard {}\r\n","import { Record } from \"immutable\";\r\nimport { Mode } from \"../store/mode\";\r\n\r\nexport interface IList {\r\n    id: string;\r\n    idBoard: string;\r\n    name: string;\r\n    pos: number;\r\n    mode: Mode;\r\n}\r\n\r\nconst initialItem: IList = {\r\n    id: \"\",\r\n    idBoard: \"\",\r\n    name: \"\",\r\n    pos: 0,\r\n    mode: Mode.viewing\r\n};\r\n\r\nexport default class List extends Record(initialItem) implements IList {}\r\n","import * as types from \"./types\";\r\nimport List from \"src/models/list\";\r\nimport { Mode } from \"src/store/mode\";\r\n\r\nexport const addLists = (lists: List[]) =>\r\n    ({\r\n        type: types.ADD_LISTS,\r\n        lists\r\n    } as const);\r\n\r\nexport const createList = (idList: string, name: string) =>\r\n    ({\r\n        type: types.CREATE_LIST,\r\n        idList,\r\n        name\r\n    } as const);\r\n\r\nexport const setMode = (id: string, mode: Mode) =>\r\n    ({\r\n        type: types.SET_MODE,\r\n        id,\r\n        mode\r\n    } as const);\r\n\r\nexport const updateList = (id: string, list: List) =>\r\n    ({\r\n        type: types.UPDATE_LIST,\r\n        id,\r\n        list\r\n    } as const);\r\n\r\nexport const updateListSuccess = (list: List) =>\r\n    ({\r\n        type: types.UPDATE_LIST_SUCCESS,\r\n        list\r\n    } as const);\r\n\r\nexport const deleteList = (id: string) =>\r\n    ({\r\n        type: types.DELETE_LIST,\r\n        id\r\n    } as const);\r\n\r\nexport const deleteListSuccess = (id: string) =>\r\n    ({\r\n        type: types.DELETE_LIST_SUCCESS,\r\n        id\r\n    } as const);\r\n\r\nexport const sortByPosition = () =>\r\n    ({\r\n        type: types.SORT_BY_POSITION\r\n    } as const);\r\n\r\nexport const sortList = (id: string, idBoard: string, newIndex: number, oldIndex: number) =>\r\n    ({\r\n        type: types.SORT_LIST,\r\n        id,\r\n        idBoard,\r\n        newIndex,\r\n        oldIndex\r\n    } as const);\r\n","import bottle from \"src/services\";\r\nimport { put, call, takeEvery } from \"@redux-saga/core/effects\";\r\nimport * as types from \"./types\";\r\nimport { addBoards, loadBoardsError } from \"./actions\";\r\nimport Board from \"src/models/board\";\r\nimport List from \"src/models/list\";\r\nimport { IApiBoard } from \"src/services/api/apiBoard\";\r\nimport { IApiList } from \"src/services/api/apiList\";\r\nimport { addLists } from \"src/store/lists/actions\";\r\n\r\nfunction* loadBoardsAsync(services: typeof bottle) {\r\n    try {\r\n        const apiBoardsWithLists = yield call(\r\n            services.container.ApiBoard.loadBoardsWithListsForIdMember,\r\n            localStorage.getItem(\"idMember\") || \"\"\r\n        );\r\n\r\n        yield put(addBoards(apiBoardsWithLists.map((board: IApiBoard) => new Board(board))));\r\n\r\n        yield put(\r\n            addLists(\r\n                apiBoardsWithLists\r\n                    .map((board: IApiBoard) => board.lists)\r\n                    .flat()\r\n                    .map((list: IApiList) => new List(list))\r\n            )\r\n        );\r\n    } catch (e) {\r\n        yield put(loadBoardsError());\r\n    }\r\n}\r\n\r\nexport default function* boardSaga(services: typeof bottle) {\r\n    yield takeEvery(types.LOAD_BOARDS, loadBoardsAsync, services);\r\n}\r\n","import { createSelector } from \"reselect\";\r\nimport { IStore } from \"src/store/rootReducer\";\r\nimport { getIdMember, getToken, getKey } from \"src/store/auth/selectors\";\r\nimport { getBoards, getBoardsLoadingState } from \"src/store/boards/selectors\";\r\nimport { getIdList, getName } from \"src/store/createCard/selectors\";\r\n\r\nconst propsFirstSelector = (_: IStore, prop: any) => prop;\r\n\r\nexport const authState = (state: IStore) => state.auth;\r\nexport const authGetIdMember = createSelector(authState, getIdMember);\r\nexport const authGetToken = createSelector(authState, getToken);\r\nexport const authGetKey = createSelector(authState, getKey);\r\n\r\nexport const boardState = (state: IStore) => state.boards;\r\nexport const boardsGetBoardsLoadingState = createSelector(boardState, getBoardsLoadingState);\r\nexport const boardsGetBoards = createSelector(boardState, getBoards);\r\nexport const boardsGetBoardById = createSelector(boardsGetBoards, propsFirstSelector, (boards, idBoard) =>\r\n    boards.get(idBoard)\r\n);\r\n\r\nexport const listState = (state: IStore) => state.lists;\r\nexport const listsGetListsByIdBoard = createSelector(listState, propsFirstSelector, (lists, idBoard) =>\r\n    lists.filter(list => list.idBoard === idBoard)\r\n);\r\nexport const listsGetById = createSelector(listState, propsFirstSelector, (lists, id) => {\r\n    return lists.find(list => list.id === id);\r\n});\r\n\r\nexport const cardState = (state: IStore) => state.cards;\r\nexport const cardsGetCardsByIdList = createSelector(cardState, propsFirstSelector, (cards, idList) =>\r\n    cards.filter(card => card.idList === idList)\r\n);\r\nexport const cardsGetById = createSelector(cardState, propsFirstSelector, (cards, id) => {\r\n    return cards.find(card => card.id === id);\r\n});\r\n\r\nexport const createCardState = (state: IStore) => state.createCard;\r\nexport const createCardGetIdList = createSelector(createCardState, getIdList);\r\nexport const createCardGetName = createSelector(createCardState, getName);\r\n","import { TStoreAuth } from \"./reducer\";\r\n\r\nexport const getIdMember = (state: TStoreAuth) => state.idMember;\r\nexport const getToken = (state: TStoreAuth) => state.token;\r\nexport const getKey = (state: TStoreAuth) => state.key;\r\n","import { TStoreBoard } from \"./reducer\";\r\n\r\nexport const getBoardsLoadingState = (state: TStoreBoard) => state.boardsLoadingState;\r\nexport const getBoards = (state: TStoreBoard) => state.collection;\r\n","import { TStoreCreateCard } from \"./reducer\";\r\n\r\nexport const getIdList = (state: TStoreCreateCard) => state.idList;\r\nexport const getName = (state: TStoreCreateCard) => state.name;\r\n","import bottle from \"src/services\";\r\nimport { Map } from \"immutable\";\r\nimport { put, call, takeEvery, select } from \"@redux-saga/core/effects\";\r\nimport { listsGetById, listsGetListsByIdBoard } from \"src/store/rootSelector\";\r\nimport * as types from \"./types\";\r\nimport List from \"src/models/list\";\r\nimport {\r\n    addLists,\r\n    createList,\r\n    updateList,\r\n    updateListSuccess,\r\n    deleteList,\r\n    deleteListSuccess,\r\n    sortByPosition,\r\n    sortList\r\n} from \"./actions\";\r\nimport { loadBoards } from \"src/store/boards/actions\";\r\n\r\nfunction* createListAsync(services: typeof bottle, action: ReturnType<typeof createList>) {\r\n    try {\r\n        const list = yield call(services.container.ApiList.create, action.idList, action.name);\r\n        yield put(addLists([new List(list)]));\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}\r\n\r\nfunction* updateListAsync(services: typeof bottle, action: ReturnType<typeof updateList>) {\r\n    try {\r\n        const list = yield call(services.container.ApiList.update, action.id, action.list.toJS());\r\n        yield put(updateListSuccess(new List(list)));\r\n        yield put(sortByPosition());\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}\r\n\r\nfunction* deleteListAsync(services: typeof bottle, action: ReturnType<typeof deleteList>) {\r\n    try {\r\n        yield call(services.container.ApiList.delete, action.id);\r\n        yield put(deleteListSuccess(action.id));\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}\r\n\r\nfunction* sortListAsync(services: typeof bottle, action: ReturnType<typeof sortList>) {\r\n    try {\r\n        const getPositionByIndex = (lists: Map<string, List>, index: number) => {\r\n            const list: List | undefined = lists.skip(index).first();\r\n            if (list) return list.pos;\r\n            return 0;\r\n        };\r\n\r\n        let list = yield select(listsGetById, action.id);\r\n        if (!list) throw new Error(\"Error not found list\");\r\n\r\n        const lists = yield select(listsGetListsByIdBoard, action.idBoard);\r\n\r\n        let newPosition = 0;\r\n\r\n        // вариенты перемещение листа\r\n        if (action.newIndex === 0) {\r\n            // в качало списка\r\n            newPosition = getPositionByIndex(lists, 0) / 2;\r\n        } else if (action.newIndex === lists.size - 1) {\r\n            // в конец списка\r\n            newPosition = getPositionByIndex(lists, action.newIndex) * 2;\r\n        } else {\r\n            // в середину\r\n            let fixFromTopToBottom = 0;\r\n            if (action.newIndex > action.oldIndex) fixFromTopToBottom = 1; // при перетаскивании карточки снизу вверх\r\n\r\n            const prevListPosition = getPositionByIndex(lists, action.newIndex - 1 + fixFromTopToBottom);\r\n            const nextListPosition = getPositionByIndex(lists, action.newIndex + fixFromTopToBottom);\r\n\r\n            newPosition = (prevListPosition + nextListPosition) / 2;\r\n        }\r\n\r\n        list = list.merge({ pos: newPosition });\r\n        yield put(addLists([list]));\r\n        yield put(sortByPosition());\r\n\r\n        let apiList = yield call(services.container.ApiList.update, action.id, list.toJS());\r\n\r\n        // Если сохраняемая позиция слишком малое дробное число, слишком большое или слишком близкое к другой позиции, то сервер в ответ прислатьет карточку с другой позицией, а соседним карточкам изменяет позицию, не говоря явно об этом клиенту.\r\n        // Можно было повторить логику изменения позиции аналогично серверной, но болеее багоустойчиво перезапроситься позицию для всех карточке.\r\n        if (list.pos !== apiList.pos) yield put(loadBoards());\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}\r\n\r\nexport default function* listSaga(services: typeof bottle) {\r\n    yield takeEvery(types.CREATE_LIST, createListAsync, services);\r\n    yield takeEvery(types.UPDATE_LIST, updateListAsync, services);\r\n    yield takeEvery(types.DELETE_LIST, deleteListAsync, services);\r\n    yield takeEvery(types.SORT_LIST, sortListAsync, services);\r\n}\r\n","import * as types from \"./types\";\r\nimport Card from \"src/models/card\";\r\nimport { Mode } from \"src/store/mode\";\r\n\r\nexport const addCards = (cards: Card[]) =>\r\n    ({\r\n        type: types.ADD_CARDS,\r\n        cards\r\n    } as const);\r\n\r\nexport const loadCardsForBoard = (idBoard: string) =>\r\n    ({\r\n        type: types.LOAD_CARDS_FOR_BOARD,\r\n        idBoard\r\n    } as const);\r\n\r\nexport const createCard = (idList: string, name: string) =>\r\n    ({\r\n        type: types.CREATE_CARD,\r\n        idList,\r\n        name\r\n    } as const);\r\n\r\nexport const setMode = (id: string, mode: Mode) =>\r\n    ({\r\n        type: types.SET_MODE,\r\n        id,\r\n        mode\r\n    } as const);\r\n\r\nexport const updateCard = (id: string, card: Card) =>\r\n    ({\r\n        type: types.UPDATE_CARD,\r\n        id,\r\n        card\r\n    } as const);\r\n\r\nexport const updateCardSuccess = (card: Card) =>\r\n    ({\r\n        type: types.UPDATE_CARD_SUCCESS,\r\n        card\r\n    } as const);\r\n\r\nexport const deleteCard = (id: string) =>\r\n    ({\r\n        type: types.DELETE_CARD,\r\n        id\r\n    } as const);\r\n\r\nexport const deleteCardSuccess = (id: string) =>\r\n    ({\r\n        type: types.DELETE_CARD_SUCCESS,\r\n        id\r\n    } as const);\r\n\r\nexport const sortByPosition = () =>\r\n    ({\r\n        type: types.SORT_BY_POSITION\r\n    } as const);\r\n\r\nexport const sortCard = (id: string, idList: string, idBoard: string, newIndex: number, oldIndex: number) =>\r\n    ({\r\n        type: types.SORT_CARD,\r\n        id,\r\n        idList,\r\n        idBoard,\r\n        newIndex,\r\n        oldIndex\r\n    } as const);\r\n","import * as types from \"./types\";\r\n\r\nexport const setName = (name: string) =>\r\n    ({\r\n        type: types.SET_NAME,\r\n        name\r\n    } as const);\r\n\r\nexport const setIdList = (idList: string) =>\r\n    ({\r\n        type: types.SET_ID_LIST,\r\n        idList\r\n    } as const);\r\n\r\nexport const deleteCreateCard = () => ({ type: types.DELETE_CREATE_CARD } as const);\r\n","import bottle from \"src/services\";\r\nimport { Map } from \"immutable\";\r\nimport { put, call, takeEvery, select } from \"@redux-saga/core/effects\";\r\nimport { cardsGetById, cardsGetCardsByIdList } from \"src/store/rootSelector\";\r\nimport * as types from \"./types\";\r\nimport Card from \"src/models/card\";\r\nimport { IApiCard } from \"src/services/api/apiCard\";\r\nimport {\r\n    addCards,\r\n    loadCardsForBoard,\r\n    createCard,\r\n    updateCard,\r\n    updateCardSuccess,\r\n    deleteCard,\r\n    deleteCardSuccess,\r\n    sortByPosition,\r\n    sortCard\r\n} from \"./actions\";\r\nimport { setCardsLoaded, loadCardsForBoardError } from \"src/store/boards/actions\";\r\nimport { deleteCreateCard } from \"src/store/createCard/actions\";\r\n\r\nfunction* loadCardsForBoardAsync(services: typeof bottle, action: ReturnType<typeof loadCardsForBoard>) {\r\n    try {\r\n        const cards = yield call(services.container.ApiCard.loadCardsForBoard, action.idBoard);\r\n        yield put(addCards(cards.map((card: IApiCard) => new Card(card))));\r\n        yield put(sortByPosition());\r\n        yield put(setCardsLoaded(action.idBoard));\r\n    } catch (e) {\r\n        yield put(loadCardsForBoardError(action.idBoard));\r\n    }\r\n}\r\n\r\nfunction* createCardAsync(services: typeof bottle, action: ReturnType<typeof createCard>) {\r\n    try {\r\n        const card = yield call(services.container.ApiCard.create, action.idList, action.name);\r\n        yield put(addCards([new Card(card)]));\r\n        yield put(deleteCreateCard());\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}\r\n\r\nfunction* updateCardAsync(services: typeof bottle, action: ReturnType<typeof updateCard>) {\r\n    try {\r\n        const card = yield call(services.container.ApiCard.update, action.id, action.card.toJS());\r\n        yield put(updateCardSuccess(new Card(card)));\r\n        yield put(sortByPosition());\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}\r\n\r\nfunction* deleteCardAsync(services: typeof bottle, action: ReturnType<typeof deleteCard>) {\r\n    try {\r\n        yield call(services.container.ApiCard.delete, action.id);\r\n        yield put(deleteCardSuccess(action.id));\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}\r\n\r\nfunction* sortCardAsync(services: typeof bottle, action: ReturnType<typeof sortCard>) {\r\n    try {\r\n        const getPositionByIndex = (cards: Map<string, Card>, index: number) => {\r\n            const card: Card | undefined = cards.skip(index).first();\r\n            if (card) return card.pos;\r\n            return 0;\r\n        };\r\n\r\n        let card = yield select(cardsGetById, action.id);\r\n        if (!card) throw new Error(\"Error not found card\");\r\n\r\n        const cards = yield select(cardsGetCardsByIdList, action.idList);\r\n\r\n        let newPosition = 0;\r\n        let fixMoveBetweenLists = 0;\r\n        if (action.idList !== card.idList) fixMoveBetweenLists = 1; // при перестаскивании карточки между листами\r\n\r\n        // вариенты перемещение карточки\r\n        if (action.newIndex === 0) {\r\n            // в качало списка\r\n            newPosition = getPositionByIndex(cards, 0) / 2;\r\n        } else if (action.newIndex === cards.size - 1 + fixMoveBetweenLists) {\r\n            // в конец списка\r\n            newPosition = getPositionByIndex(cards, action.newIndex - fixMoveBetweenLists) * 2;\r\n        } else {\r\n            // в середину\r\n            let fixFromTopToBottom = 0;\r\n            if (action.newIndex > action.oldIndex && action.idList === card.idList) fixFromTopToBottom = 1; // при перетаскивании карточки снизу вверх\r\n\r\n            const prevCardPosition = getPositionByIndex(cards, action.newIndex - 1 + fixFromTopToBottom);\r\n            const nextCardPosition = getPositionByIndex(cards, action.newIndex + fixFromTopToBottom);\r\n\r\n            newPosition = (prevCardPosition + nextCardPosition) / 2;\r\n        }\r\n\r\n        card = card.merge({ idList: action.idList, pos: newPosition });\r\n        yield put(addCards([card]));\r\n        yield put(sortByPosition());\r\n\r\n        let apiCard = yield call(services.container.ApiCard.update, action.id, card.toJS());\r\n\r\n        // Если сохраняемая позиция слишком малое дробное число, слишком большое или слишком близкое к другой позиции, то сервер в ответ прислатьет карточку с другой позицией, а соседним карточкам изменяет позицию, не говоря явно об этом клиенту.\r\n        // Можно было повторить логику изменения позиции аналогично серверной, но болеее багоустойчиво перезапроситься позицию для всех карточке.\r\n        if (card.pos !== apiCard.pos) yield put(loadCardsForBoard(action.idBoard));\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}\r\n\r\nexport default function* cardSaga(services: typeof bottle) {\r\n    yield takeEvery(types.LOAD_CARDS_FOR_BOARD, loadCardsForBoardAsync, services);\r\n    yield takeEvery(types.CREATE_CARD, createCardAsync, services);\r\n    yield takeEvery(types.UPDATE_CARD, updateCardAsync, services);\r\n    yield takeEvery(types.DELETE_CARD, deleteCardAsync, services);\r\n    yield takeEvery(types.SORT_CARD, sortCardAsync, services);\r\n}\r\n","import { all } from \"redux-saga/effects\";\r\nimport Bottle from \"bottlejs\";\r\nimport authSaga from \"./auth/saga\";\r\nimport boardSaga from \"./boards/saga\";\r\nimport listSaga from \"./lists/saga\";\r\nimport cardSaga from \"./cards/saga\";\r\n\r\nexport default (services: Bottle) => {\r\n    return function* rootSaga() {\r\n        yield all([authSaga(services), boardSaga(services), listSaga(services), cardSaga(services)]);\r\n    };\r\n};\r\n","import Bottle from \"bottlejs\";\r\nimport Http from \"./http\";\r\nimport ApiAuth from \"./api/apiAuth\";\r\nimport ApiBoard from \"./api/apiBoard\";\r\nimport ApiList from \"./api/apiList\";\r\nimport ApiCard from \"./api/apiCard\";\r\n\r\nlet bottle = new Bottle();\r\n\r\nexport default bottle;\r\nbottle.service(\"Http\", Http);\r\nbottle.service(\"ApiAuth\", ApiAuth, \"Http\");\r\nbottle.service(\"ApiBoard\", ApiBoard, \"Http\");\r\nbottle.service(\"ApiList\", ApiList, \"Http\");\r\nbottle.service(\"ApiCard\", ApiCard, \"Http\");\r\n\r\ndeclare module \"bottlejs\" {\r\n    interface IContainer {\r\n        ApiAuth: ApiAuth;\r\n        ApiBoard: ApiBoard;\r\n        ApiList: ApiList;\r\n        ApiCard: ApiCard;\r\n    }\r\n}\r\n","import { IHttp } from \"./IHttp\";\r\n\r\nexport interface IData {\r\n    idMember?: string | null;\r\n    token?: string | null;\r\n    key?: string | null;\r\n    [key: string]: string | number | null | undefined;\r\n}\r\n\r\nexport default class Http implements IHttp {\r\n    get = (url: string, data: IData) => {\r\n        return this.request(\"GET\", url, data);\r\n    };\r\n\r\n    post = (url: string, data: IData) => {\r\n        return this.request(\"POST\", url, data);\r\n    };\r\n\r\n    put = (url: string, data: IData) => {\r\n        return this.request(\"PUT\", url, data);\r\n    };\r\n\r\n    delete = (url: string, data: IData) => {\r\n        return this.request(\"DELETE\", url, data);\r\n    };\r\n\r\n    request = (method: string, url: string, data: IData = {}) => {\r\n        if (!data.idMember) data.idMember = localStorage.getItem(\"idMember\");\r\n        if (!data.token) data.token = localStorage.getItem(\"token\");\r\n        if (!data.key) data.key = process.env.REACT_APP_API_KEY;\r\n\r\n        const parameters = Object.keys(data)\r\n            .map(key => key + \"=\" + data[key])\r\n            .join(\"&\");\r\n\r\n        return fetch(\"https://api.trello.com/1/\" + url + \"?\" + parameters, {\r\n            method\r\n        }).then(response => response.json());\r\n    };\r\n}\r\n","import { IHttp } from \"../IHttp\";\r\n\r\nexport default class ApiAuth {\r\n    public readonly http: IHttp;\r\n\r\n    constructor(http: IHttp) {\r\n        this.http = http;\r\n    }\r\n\r\n    apiGetIdMemberByToken = (token: string) => {\r\n        return this.http.get(\"tokens/\" + token + \"/\", { token }).then((response: any) => {\r\n            return response.idMember;\r\n        });\r\n    };\r\n\r\n    apiDeleteToken = (token: string) => {\r\n        return this.http.delete(\"tokens/\" + token + \"/\").then((response: any) => {\r\n            return response._value === null;\r\n        });\r\n    };\r\n}\r\n","import { IHttp } from \"../IHttp\";\r\nimport { IApiList } from \"./apiList\";\r\n\r\nexport interface IApiBoard {\r\n    id: string;\r\n    name: string;\r\n    lists: IApiList[];\r\n}\r\n\r\nexport default class ApiBoard {\r\n    public readonly http: IHttp;\r\n\r\n    constructor(http: IHttp) {\r\n        this.http = http;\r\n    }\r\n\r\n    loadBoardsWithListsForIdMember = (idMember: string): Promise<IApiBoard> => {\r\n        return this.http.get(\"members/\" + idMember + \"/boards\", {\r\n            boards: \"all\",\r\n            lists: \"all\"\r\n        });\r\n    };\r\n}\r\n","import { IHttp } from \"../IHttp\";\r\n\r\nexport interface IApiList {\r\n    id: string;\r\n    idBoard: string;\r\n    name: string;\r\n}\r\n\r\nexport default class ApiList {\r\n    public readonly http: IHttp;\r\n\r\n    constructor(http: IHttp) {\r\n        this.http = http;\r\n    }\r\n\r\n    create = (idList: string, name: string): Promise<IApiList> => {\r\n        const keepFromSource = \"all\";\r\n        return this.http.post(\"lists\", { idList, name, keepFromSource });\r\n    };\r\n\r\n    update = (id: string, card: IApiList) => {\r\n        return this.http.put(\"lists/\" + id, card);\r\n    };\r\n\r\n    delete = (id: string) => {\r\n        return this.http.delete(\"lists/\" + id);\r\n    };\r\n}\r\n","import { IHttp } from \"../IHttp\";\r\n\r\nexport interface IApiCard {\r\n    id: string;\r\n    idList: string;\r\n    name: string;\r\n    pos: number;\r\n}\r\n\r\nexport default class ApiCard {\r\n    public readonly http: IHttp;\r\n\r\n    constructor(http: IHttp) {\r\n        this.http = http;\r\n    }\r\n\r\n    loadCardsForBoard = (idBoard: string): Promise<IApiCard> => {\r\n        return this.http.get(\"boards/\" + idBoard + \"/cards/\");\r\n    };\r\n\r\n    create = (idList: string, name: string): Promise<IApiCard> => {\r\n        const keepFromSource = \"all\";\r\n        return this.http.post(\"cards\", { idList, name, keepFromSource });\r\n    };\r\n\r\n    update = (id: string, card: IApiCard) => {\r\n        return this.http.put(\"cards/\" + id, card);\r\n    };\r\n\r\n    delete = (id: string) => {\r\n        return this.http.delete(\"cards/\" + id);\r\n    };\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\"No internet connection found. App is running in offline mode.\");\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import { useDispatch } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { allActionsTypes } from \"src/store/actionTypes\";\r\n\r\nexport default function useCustomDispatch() {\r\n    return useDispatch<Dispatch<allActionsTypes>>();\r\n}\r\n","import React from \"react\";\r\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\r\nimport { redirectToApiForGetToken } from \"src/store/auth/actions\";\r\n\r\nexport default function Auth() {\r\n    const dispatch = useCustomDispatch();\r\n\r\n    return (\r\n        <a href=\"#\" className=\"btn-auth\" onClick={() => dispatch(redirectToApiForGetToken())}>\r\n            подтверждения доступа\r\n        </a>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport \"./MainPage.scss\";\r\nimport Auth from \"src/components/Auth/Auth\";\r\n\r\nexport default function MainPage() {\r\n    return (\r\n        <div className=\"mainPage\">\r\n            <div className=\"formLogin\">\r\n                <h1 className=\"title\">Клиент для Trello API</h1>\r\n                <div>\r\n                    Внимание!!! В этом клиенте есть функции удаление и изменение карточек,\r\n                    <br />\r\n                    что бы не рисковать своими рабочими досками, воспользуйтесь тестовым аккаунтом.\r\n                </div>\r\n                <ol>\r\n                    <li>\r\n                        <p>\r\n                            Авторизуйтесь на{\" \"}\r\n                            <a href=\"https://trello.com/login\" target=\"_blank\">\r\n                                trello.com\r\n                            </a>{\" \"}\r\n                            под тестовым аккаунтом\r\n                        </p>\r\n                        <p>\r\n                            Логин: <strong>test-of-war@yandex.ru</strong>\r\n                        </p>\r\n                        <p>\r\n                            Пароль: <strong>Test1234567</strong>\r\n                        </p>\r\n                    </li>\r\n                    <li>\r\n                        После авторизации перейдите для <Auth />\r\n                    </li>\r\n                    <li>На открывшейся странице нажмите \"Разрешить\"</li>\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./Preloader.scss\";\r\n\r\nexport default function Preloader() {\r\n    const domElement = document.getElementById(\"preloader-root\");\r\n\r\n    if (domElement) {\r\n        return ReactDOM.createPortal(\r\n            <div id=\"preloader\">\r\n                <div className=\"preloader\">\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                </div>\r\n            </div>,\r\n            domElement\r\n        );\r\n    } else return <></>;\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router\";\r\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\r\nimport { loginByToken } from \"src/store/auth/actions\";\r\nimport Preloader from \"src/components/Preloader/Preloader\";\r\n\r\nexport default function AuthSuccess() {\r\n    const dispatch = useCustomDispatch();\r\n    const location = useLocation();\r\n    const token = location.hash.replace(\"#token=\", \"\");\r\n\r\n    useEffect(() => {\r\n        dispatch(loginByToken(token));\r\n    }, [dispatch, token]);\r\n\r\n    return <Preloader />;\r\n}\r\n","import { useSelector } from \"react-redux\";\r\nimport { IStore } from \"src/store/rootReducer\";\r\nimport * as rootSelector from \"src/store/rootSelector\";\r\n\r\ntype InferSelectorFunctionsTypes<T> = T extends { [key: string]: infer U } ? U : never;\r\n\r\ntype InferredTypes = InferSelectorFunctionsTypes<typeof rootSelector>;\r\n\r\nexport default function useCustomSelector<T extends InferredTypes>(selector: T, arg?: number | string) {\r\n    return useSelector((state: IStore) => selector(state, arg) as ReturnType<T>);\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\r\nimport useCustomSelector from \"src/hooks/useCustomSelector\";\r\nimport { boardState } from \"src/store/rootSelector\";\r\nimport { LoadingState } from \"src/store/loadingState\";\r\nimport { loadBoards } from \"src/store/boards/actions\";\r\nimport Preloader from \"src/components/Preloader/Preloader\";\r\n\r\nexport default function LoadBoardsWithListsContainer() {\r\n    const dispatch = useCustomDispatch();\r\n    const boards = useCustomSelector(boardState);\r\n\r\n    useEffect(() => {\r\n        dispatch(loadBoards());\r\n    }, [dispatch]);\r\n\r\n    switch (boards.boardsLoadingState) {\r\n        case LoadingState.isNotLoaded:\r\n        case LoadingState.isLoading:\r\n            return <Preloader />;\r\n        case LoadingState.isError:\r\n            return <h1>Error loading boards</h1>;\r\n    }\r\n\r\n    return <></>;\r\n}\r\n","import React from \"react\";\r\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\r\nimport { logoutByToken } from \"src/store/auth/actions\";\r\n\r\nimport \"./Logout.scss\";\r\n\r\nexport default function Logout() {\r\n    const dispatch = useCustomDispatch();\r\n\r\n    const token = localStorage.getItem(\"token\") || \"\";\r\n\r\n    return (\r\n        <button className=\"logout\" onClick={() => dispatch(logoutByToken(token))}>\r\n            Выход\r\n        </button>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { TStoreBoard } from \"src/store/boards/reducer\";\r\nimport { User } from \"styled-icons/heroicons-outline/User\";\r\nimport { HomeAlt as Home } from \"styled-icons/boxicons-regular/HomeAlt\";\r\n\r\nimport \"./ListBoardsPage.scss\";\r\nimport Logout from \"../Auth/Logout/Logout\";\r\n\r\ninterface ListBoardsPageProps {\r\n    boards: TStoreBoard;\r\n}\r\n\r\nexport default function ListBoardsPage(props: ListBoardsPageProps) {\r\n    return (\r\n        <div className=\"pageListBoards\">\r\n            <div className=\"head\">\r\n                <Link to=\"/\" className=\"linkHome\">\r\n                    <Home size=\"20\" className=\"iconHome\" />\r\n                </Link>\r\n                <Logout />\r\n            </div>\r\n            <div className=\"wrapper-content\">\r\n                <div className=\"contentPageListBoards\">\r\n                    <h1 className=\"title\">\r\n                        <User size=\"18\" className=\"icon\" />\r\n                        Выберите доску\r\n                    </h1>\r\n                    <ul className=\"listLinkBoards\">\r\n                        {props.boards.collection.valueSeq().map(board => (\r\n                            <li key={board.id}>\r\n                                <Link to={\"/board/\" + board.id} className=\"linkBoard\">\r\n                                    {board.name}\r\n                                </Link>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport useCustomSelector from \"src/hooks/useCustomSelector\";\r\nimport { boardState } from \"src/store/rootSelector\";\r\nimport { LoadingState } from \"src/store/loadingState\";\r\nimport LoadBoardsWithListsContainer from \"src/components/LoadBoardsWithLists/LoadBoardsWithListsContainer\";\r\nimport ListBoardsPage from \"./ListBoardsPage\";\r\n\r\nexport default function ListBoardsPageContainer() {\r\n    const boards = useCustomSelector(boardState);\r\n\r\n    if (boards.boardsLoadingState === LoadingState.isNotLoaded) {\r\n        return <LoadBoardsWithListsContainer />;\r\n    }\r\n\r\n    return <ListBoardsPage boards={boards} />;\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\r\nimport { loadCardsForBoard } from \"src/store/cards/actions\";\r\nimport { LoadingState } from \"src/store/loadingState\";\r\nimport Board from \"src/models/board\";\r\nimport Preloader from \"src/components/Preloader/Preloader\";\r\n\r\ninterface ILoadCardsContainerProps {\r\n    board: Board;\r\n}\r\n\r\nexport default function LoadCardsContainer(props: ILoadCardsContainerProps) {\r\n    const dispatch = useCustomDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(loadCardsForBoard(props.board.id));\r\n    }, [props.board, dispatch]);\r\n\r\n    switch (props.board.cardsLoadingState) {\r\n        case LoadingState.isNotLoaded:\r\n        case LoadingState.isLoading:\r\n            return <Preloader />;\r\n        case LoadingState.isError:\r\n            return <h1>Error loading cards</h1>;\r\n    }\r\n\r\n    return <></>;\r\n}\r\n","import React from \"react\";\r\nimport { Pencil } from \"@styled-icons/boxicons-regular/Pencil\";\r\n\r\nimport \"./EditCardButton.scss\";\r\n\r\ninterface IEditCardButtonProps {\r\n    handleSetModeEditing(): void;\r\n}\r\n\r\nexport default function EditCardButton(props: IEditCardButtonProps) {\r\n    return (\r\n        <button className=\"editCardButton\" onClick={props.handleSetModeEditing}>\r\n            <Pencil size=\"14\" />\r\n        </button>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\r\nimport { Mode } from \"src/store/mode\";\r\nimport { setMode } from \"src/store/cards/actions\";\r\nimport EditCardButton from \"./EditCardButton\";\r\n\r\ninterface IEditCardButtonContainerProps {\r\n    idCard: string;\r\n}\r\n\r\nexport default function EditCardButtonContainer(props: IEditCardButtonContainerProps) {\r\n    const dispatch = useCustomDispatch();\r\n    const handleSetModeEditing = () => dispatch(setMode(props.idCard, Mode.editing));\r\n\r\n    return <EditCardButton handleSetModeEditing={handleSetModeEditing} />;\r\n}\r\n","import React, { ReactNode } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./Modal.scss\";\r\n\r\ninterface IModalProps {\r\n    title: string;\r\n    onClose(): void;\r\n    children: ReactNode;\r\n}\r\n\r\nexport default function Modal(props: IModalProps) {\r\n    const domElement = document.getElementById(\"modal-root\");\r\n\r\n    if (domElement) {\r\n        return ReactDOM.createPortal(\r\n            <div id=\"openModal\" className=\"modal\">\r\n                <div className=\"modalDialog\">\r\n                    <div className=\"modalContent\">\r\n                        <div className=\"modal-header\">\r\n                            <h3 className=\"modalTitle\">{props.title}</h3>\r\n                            <a href=\"#close\" title=\"Close\" className=\"close\" onClick={props.onClose}>\r\n                                ×\r\n                            </a>\r\n                        </div>\r\n                        <div className=\"modalBody\">{props.children}</div>\r\n                    </div>\r\n                </div>\r\n            </div>,\r\n            domElement\r\n        );\r\n    } else return <></>;\r\n}\r\n","import React from \"react\";\r\nimport Modal from \"src/components/Modal/Modal\";\r\nimport { Trash } from \"styled-icons/boxicons-regular/Trash\";\r\n\r\nimport \"./DeleteCardButton.scss\";\r\n\r\ninterface IDeleteCardButtonProps {\r\n    showModal: boolean;\r\n    handleCloseModal(): void;\r\n    handleConfirmationDelete(): void;\r\n    handleButtonDelete(): void;\r\n}\r\n\r\nexport default function DeleteCardButton(props: IDeleteCardButtonProps) {\r\n    return (\r\n        <>\r\n            {props.showModal && (\r\n                <Modal title=\"Удалить карточку?\" onClose={props.handleCloseModal}>\r\n                    <div className=\"wrapperButtons\">\r\n                        <button onClick={props.handleConfirmationDelete}>Да</button>\r\n                        <button onClick={props.handleCloseModal}>Нет</button>\r\n                    </div>\r\n                </Modal>\r\n            )}\r\n            <button className=\"deleteCardButton\" onClick={props.handleButtonDelete}>\r\n                <Trash size=\"14\" />\r\n            </button>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\r\nimport { deleteCard } from \"src/store/cards/actions\";\r\nimport DeleteCardButton from \"./DeleteCardButton\";\r\n\r\ninterface IDeleteCardButtonContainerProps {\r\n    idCard: string;\r\n}\r\n\r\nexport default function DeleteCardButtonContainer(props: IDeleteCardButtonContainerProps) {\r\n    const dispatch = useCustomDispatch();\r\n\r\n    const [showModal, setShowModal] = useState();\r\n\r\n    const handleConfirmationDelete = () => {\r\n        dispatch(deleteCard(props.idCard));\r\n        setShowModal(false);\r\n    };\r\n\r\n    const handleButtonDelete = () => {\r\n        setShowModal(true);\r\n    };\r\n\r\n    const handleCloseModal = () => setShowModal(false);\r\n\r\n    return (\r\n        <DeleteCardButton\r\n            showModal={showModal}\r\n            handleCloseModal={handleCloseModal}\r\n            handleButtonDelete={handleButtonDelete}\r\n            handleConfirmationDelete={handleConfirmationDelete}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport CardModel from \"src/models/card\";\r\nimport EditCardButtonContainer from \"../EditCardButton/EditCardButtonContainer\";\r\nimport DeleteCardButtonContainer from \"../DeleteCardButton/DeleteCardButtonContainer\";\r\n\r\nimport \"./Card.scss\";\r\n\r\ninterface ICardProps {\r\n    card: CardModel;\r\n}\r\n\r\nexport default function Card(props: ICardProps) {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"panel\">\r\n                <EditCardButtonContainer idCard={props.card.id} />\r\n                <DeleteCardButtonContainer idCard={props.card.id} />\r\n            </div>\r\n            <div className=\"name\">{props.card.name}</div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport CardModel from \"src/models/card\";\r\nimport Card from \"./Card\";\r\n\r\ninterface ICardContainerProps {\r\n    card: CardModel;\r\n}\r\n\r\nexport default function CardContainer(props: ICardContainerProps) {\r\n    return <Card card={props.card} />;\r\n}\r\n","import React from \"react\";\r\nimport { Plus } from \"styled-icons/boxicons-regular/Plus\";\r\n\r\nimport \"./CreateCardButton.scss\";\r\n\r\ninterface ICreateCardButtonProps {\r\n    handleShowCreateCardForm(): void;\r\n}\r\n\r\nexport default function CreateCardButton(props: ICreateCardButtonProps) {\r\n    return (\r\n        <button className=\"createCardButton\" onClick={props.handleShowCreateCardForm}>\r\n            <Plus size=\"20\" />\r\n            Добавить ещё одну карточку\r\n        </button>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\r\nimport { setIdList } from \"src/store/createCard/actions\";\r\nimport CreateCardButton from \"./CreateCardButton\";\r\n\r\ninterface ICreateCardButtonContainerProps {\r\n    idList: string;\r\n}\r\n\r\nexport default function CreateCardButtonContainer(props: ICreateCardButtonContainerProps) {\r\n    const dispatch = useCustomDispatch();\r\n\r\n    const handleShowCreateCardForm = () => {\r\n        dispatch(setIdList(props.idList));\r\n    };\r\n\r\n    return <CreateCardButton handleShowCreateCardForm={handleShowCreateCardForm} />;\r\n}\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport { Close } from \"styled-icons/material/Close\";\r\n\r\nimport \"./NameCardForm.scss\";\r\n\r\ninterface ICreateCardFormProps {\r\n    name: string;\r\n    handleChangeName(name: string): void;\r\n    handleButtonClose(): void;\r\n    handleButtonSave(): void;\r\n    typeSave: \"create\" | \"update\";\r\n}\r\n\r\nexport default function NameCardForm(props: ICreateCardFormProps) {\r\n    let textInput = useRef<HTMLTextAreaElement>(null);\r\n\r\n    useEffect(() => {\r\n        if (textInput.current) textInput.current.focus();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"nameCardForm\">\r\n            <textarea\r\n                value={props.name}\r\n                onChange={e => props.handleChangeName(e.target.value)}\r\n                placeholder=\"Ввести заголовок для этой карточки\"\r\n                ref={textInput}\r\n            />\r\n            <div className=\"panel\">\r\n                <button className=\"saveCardButton\" onClick={props.handleButtonSave}>\r\n                    {props.typeSave === \"create\" && <>Добавить карточку</>}\r\n                    {props.typeSave === \"update\" && <>Сохранить</>}\r\n                </button>\r\n                <button className=\"closeNameCardForm\" onClick={props.handleButtonClose}>\r\n                    <Close size=\"20\" />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\r\nimport { Mode } from \"src/store/mode\";\r\nimport Card from \"src/models/card\";\r\nimport { setMode, updateCard as updateCardAction } from \"src/store/cards/actions\";\r\nimport NameCardForm from \"../NameCardForm/NameCardForm\";\r\n\r\ninterface IEditCardFormContainerProps {\r\n    card: Card;\r\n}\r\n\r\nexport default function EditCardFormContainer(props: IEditCardFormContainerProps) {\r\n    const dispatch = useCustomDispatch();\r\n    const [card, setCard] = useState(props.card);\r\n    const handleChangeName = (name: string) => setCard(props.card.set(\"name\", name));\r\n    const handleButtonClose = () => dispatch(setMode(props.card.id, Mode.viewing));\r\n    const handleButtonSave = () => dispatch(updateCardAction(card.id, card));\r\n\r\n    return (\r\n        <NameCardForm\r\n            name={card.name}\r\n            handleChangeName={handleChangeName}\r\n            handleButtonClose={handleButtonClose}\r\n            handleButtonSave={handleButtonSave}\r\n            typeSave=\"update\"\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\r\nimport useCustomSelector from \"src/hooks/useCustomSelector\";\r\nimport { createCardState } from \"src/store/rootSelector\";\r\nimport { deleteCreateCard, setName } from \"src/store/createCard/actions\";\r\nimport { createCard as createCardAction } from \"src/store/cards/actions\";\r\nimport NameCardForm from \"../NameCardForm/NameCardForm\";\r\n\r\nexport default function CreateCardFormContainer() {\r\n    const dispatch = useCustomDispatch();\r\n    const createCard = useCustomSelector(createCardState);\r\n    const handleChangeName = (name: string) => dispatch(setName(name));\r\n    const handleCloseForm = () => dispatch(deleteCreateCard());\r\n    const handleSave = () => dispatch(createCardAction(createCard.idList, createCard.name));\r\n\r\n    return (\r\n        <NameCardForm\r\n            name={createCard.name}\r\n            handleChangeName={handleChangeName}\r\n            handleButtonClose={handleCloseForm}\r\n            handleButtonSave={handleSave}\r\n            typeSave=\"create\"\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { TStoreCard } from \"src/store/cards/reducer\";\r\nimport { Mode } from \"src/store/mode\";\r\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport CardContainer from \"./Card/CardContainer\";\r\nimport CreateCardButtonContainer from \"./CreateCardButton/CreateCardButtonContainer\";\r\nimport EditCardFormContainer from \"./EditCardForm/EditCardFormContainer\";\r\nimport CreateCardFormContainer from \"./CreateCardForm/CreateCardFormContainer\";\r\n\r\nimport \"./CardList.scss\";\r\n\r\ninterface ICardListProps {\r\n    cards: TStoreCard;\r\n    idList: string;\r\n    createCardIdList: string;\r\n}\r\n\r\nexport default function CardList(props: ICardListProps) {\r\n    return (\r\n        <Droppable droppableId={props.idList}>\r\n            {provided => (\r\n                <div {...provided.droppableProps} ref={provided.innerRef} className=\"cardList\">\r\n                    {props.cards.valueSeq().map((card, index) =>\r\n                        card.mode === Mode.editing ? (\r\n                            <EditCardFormContainer key={card.id} card={card} />\r\n                        ) : (\r\n                            <Draggable draggableId={card.id} index={index} key={card.id}>\r\n                                {provided => (\r\n                                    <div\r\n                                        {...provided.draggableProps}\r\n                                        {...provided.dragHandleProps}\r\n                                        ref={provided.innerRef}\r\n                                    >\r\n                                        <CardContainer key={card.id} card={card} />\r\n                                    </div>\r\n                                )}\r\n                            </Draggable>\r\n                        )\r\n                    )}\r\n\r\n                    {props.idList === props.createCardIdList ? (\r\n                        <CreateCardFormContainer />\r\n                    ) : (\r\n                        <CreateCardButtonContainer idList={props.idList} />\r\n                    )}\r\n                    {provided.placeholder}\r\n                </div>\r\n            )}\r\n        </Droppable>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { TStoreCard } from \"src/store/cards/reducer\";\r\nimport CardList from \"./CardList\";\r\nimport useCustomSelector from \"src/hooks/useCustomSelector\";\r\nimport { createCardGetIdList } from \"src/store/rootSelector\";\r\n\r\ninterface ICardListContainerProps {\r\n    cards: TStoreCard;\r\n    idList: string;\r\n}\r\n\r\nexport default function CardListContainer(props: ICardListContainerProps) {\r\n    const createCardIdList = useCustomSelector(createCardGetIdList);\r\n\r\n    return <CardList cards={props.cards} idList={props.idList} createCardIdList={createCardIdList} />;\r\n}\r\n","import React from \"react\";\r\nimport ListModel from \"src/models/list\";\r\nimport { TStoreCard } from \"src/store/cards/reducer\";\r\nimport CardListContainer from \"src/components/BoardPage/CardList/CardListContainer\";\r\n\r\nimport \"./List.scss\";\r\n\r\ninterface IListProps {\r\n    list: ListModel;\r\n    cards: TStoreCard;\r\n}\r\n\r\nexport default function List(props: IListProps) {\r\n    return (\r\n        <div className=\"list\">\r\n            <div className=\"title\">\r\n                <div className=\"name\">{props.list.name}</div>\r\n                <div className=\"amountCards\">({props.cards.size})</div>\r\n            </div>\r\n            <CardListContainer cards={props.cards} idList={props.list.id} />\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport ListModel from \"src/models/list\";\r\nimport { cardsGetCardsByIdList } from \"src/store/rootSelector\";\r\nimport useCustomSelector from \"src/hooks/useCustomSelector\";\r\nimport List from \"./List\";\r\n\r\ninterface IListContainerProps {\r\n    list: ListModel;\r\n}\r\n\r\nexport default function ListContainer(props: IListContainerProps) {\r\n    let cards = useCustomSelector(cardsGetCardsByIdList, props.list.id);\r\n\r\n    return <List list={props.list} cards={cards} />;\r\n}\r\n","import React from \"react\";\r\nimport { DragDropContext, Draggable, Droppable, DropResult } from \"react-beautiful-dnd\";\r\nimport { TStoreList } from \"src/store/lists/reducer\";\r\nimport ListContainer from \"./List/ListContainer\";\r\n\r\nimport \"./ListList.scss\";\r\n\r\ninterface IListListProps {\r\n    idBoard: string;\r\n    lists: TStoreList;\r\n    onDragEnd(result: DropResult): void;\r\n}\r\n\r\nexport default function ListList(props: IListListProps) {\r\n    return (\r\n        <DragDropContext onDragEnd={props.onDragEnd}>\r\n            <Droppable droppableId={props.idBoard} direction=\"horizontal\" type=\"column\">\r\n                {provided => (\r\n                    <div {...provided.droppableProps} ref={provided.innerRef} className=\"listList\">\r\n                        {props.lists.valueSeq().map((list, index) => (\r\n                            <Draggable draggableId={list.id} index={index} key={list.id}>\r\n                                {provided => (\r\n                                    <div\r\n                                        {...provided.draggableProps}\r\n                                        {...provided.dragHandleProps}\r\n                                        ref={provided.innerRef}\r\n                                        className=\"wrapperList\"\r\n                                    >\r\n                                        <ListContainer list={list} key={list.id} />\r\n                                    </div>\r\n                                )}\r\n                            </Draggable>\r\n                        ))}\r\n                        {provided.placeholder}\r\n                    </div>\r\n                )}\r\n            </Droppable>\r\n        </DragDropContext>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { DropResult } from \"react-beautiful-dnd\";\r\nimport useCustomSelector from \"src/hooks/useCustomSelector\";\r\nimport useCustomDispatch from \"src/hooks/useCustomDispatch\";\r\nimport { listsGetListsByIdBoard } from \"src/store/rootSelector\";\r\nimport { sortCard } from \"src/store/cards/actions\";\r\nimport ListList from \"./ListList\";\r\nimport { sortList } from \"src/store/lists/actions\";\r\n\r\ninterface IListListContainerProps {\r\n    idBoard: string;\r\n}\r\n\r\nexport default function ListListContainer(props: IListListContainerProps) {\r\n    const lists = useCustomSelector(listsGetListsByIdBoard, props.idBoard);\r\n    const dispatch = useCustomDispatch();\r\n\r\n    const onDragEnd = (result: DropResult) => {\r\n        if (\r\n            !result.destination ||\r\n            (result.destination.index === result.source.index &&\r\n                result.destination.droppableId === result.source.droppableId)\r\n        )\r\n            return false;\r\n\r\n        if (result.destination.droppableId === props.idBoard) {\r\n            dispatch(\r\n                sortList(\r\n                    result.draggableId,\r\n                    result.destination.droppableId,\r\n                    result.destination.index,\r\n                    result.source.index\r\n                )\r\n            );\r\n        } else {\r\n            dispatch(\r\n                sortCard(\r\n                    result.draggableId,\r\n                    result.destination.droppableId,\r\n                    props.idBoard,\r\n                    result.destination.index,\r\n                    result.source.index\r\n                )\r\n            );\r\n        }\r\n    };\r\n\r\n    return <ListList idBoard={props.idBoard} lists={lists} onDragEnd={onDragEnd} />;\r\n}\r\n","import React from \"react\";\r\nimport { TStoreBoard } from \"src/store/boards/reducer\";\r\n\r\nimport \"./SelectBoard.scss\";\r\n\r\ninterface ISelectBoardProps {\r\n    boards: TStoreBoard;\r\n    idBoard: string;\r\n    handleRedirectToBoard: { (idBoard: string): void };\r\n}\r\n\r\nexport default function SelectBoard(props: ISelectBoardProps) {\r\n    return (\r\n        <div className=\"buttonSelectBoard\">\r\n            <span className=\"title\">Выбор доски:</span>\r\n            <select onChange={e => props.handleRedirectToBoard(e.target.value)} value={props.idBoard}>\r\n                {props.boards.collection.valueSeq().map(board => (\r\n                    <option value={board.id} key={board.id}>\r\n                        {board.name}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport useCustomSelector from \"src/hooks/useCustomSelector\";\r\nimport { boardState } from \"src/store/rootSelector\";\r\nimport { redirectToBoard } from \"src/store/router/actions\";\r\nimport SelectBoard from \"./SelectBoard\";\r\n\r\ninterface ISelectBoardContainerProps {\r\n    idBoard: string;\r\n}\r\n\r\nexport default function SelectBoardContainer(props: ISelectBoardContainerProps) {\r\n    const dispatch = useDispatch();\r\n    const boards = useCustomSelector(boardState);\r\n    const handleRedirectToBoard = (idBoard: string) => {\r\n        dispatch(redirectToBoard(idBoard));\r\n    };\r\n\r\n    return <SelectBoard boards={boards} idBoard={props.idBoard} handleRedirectToBoard={handleRedirectToBoard} />;\r\n}\r\n","import React from \"react\";\r\nimport SelectBoardContainer from \"src/components/BoardPage/NavBar/SelectBoard/SelectBoardContainer\";\r\n\r\nimport \"./NavBar.scss\";\r\nimport Logout from \"src/components/Auth/Logout/Logout\";\r\n\r\ninterface INavBarProps {\r\n    idBoard: string;\r\n}\r\n\r\nexport default function NavBar(props: INavBarProps) {\r\n    return (\r\n        <div className=\"navBar\">\r\n            <SelectBoardContainer idBoard={props.idBoard} />\r\n            <Logout />\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport ListListContainer from \"./ListList/ListListContainer\";\r\nimport NavBar from \"src/components/BoardPage/NavBar/NavBar\";\r\n\r\nimport \"./BoardPage.scss\";\r\n\r\ninterface IBoardPageProps {\r\n    idBoard: string;\r\n}\r\n\r\nexport default function BoardPage(props: IBoardPageProps) {\r\n    return (\r\n        <div className=\"board\">\r\n            <NavBar idBoard={props.idBoard} />\r\n            <ListListContainer idBoard={props.idBoard} />\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport useCustomSelector from \"src/hooks/useCustomSelector\";\r\nimport { boardsGetBoardById, boardsGetBoardsLoadingState } from \"src/store/rootSelector\";\r\nimport { LoadingState } from \"src/store/loadingState\";\r\nimport LoadBoardsWithListsContainer from \"src/components/LoadBoardsWithLists/LoadBoardsWithListsContainer\";\r\nimport LoadCardsContainer from \"src/components/LoadCards/LoadCardsContainer\";\r\n\r\nimport BoardPage from \"./BoardPage\";\r\n\r\nexport default function BoardPageContainer() {\r\n    const { idBoard } = useParams();\r\n    const boardsLoading = useCustomSelector(boardsGetBoardsLoadingState);\r\n    const board = useCustomSelector(boardsGetBoardById, idBoard);\r\n\r\n    if (boardsLoading === LoadingState.isNotLoaded) {\r\n        return <LoadBoardsWithListsContainer />;\r\n    }\r\n\r\n    if (board) {\r\n        if (board.cardsLoadingState === LoadingState.isNotLoaded) {\r\n            return <LoadCardsContainer board={board} />;\r\n        }\r\n\r\n        return <BoardPage idBoard={board.id} />;\r\n    }\r\n\r\n    return <h1>404</h1>;\r\n}\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport MainPage from \"src/components/MainPage/MainPage\";\r\nimport AuthSuccess from \"src/components/Auth/AuthSuccess/AuthSuccess\";\r\nimport ListBoardsPageContainer from \"./components/ListBoardsPage/ListBoardsPageContainer\";\r\nimport BoardPageContainer from \"./components/BoardPage/BoardPageContainer\";\r\n\r\nimport \"reset-css\";\r\nimport \"./App.scss\";\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/\" component={MainPage} />\r\n            <Route exact path=\"/auth\" />\r\n            <Route path=\"/&scope=read&response_type=token\" component={AuthSuccess} />\r\n            <Route exact path=\"/board\" component={ListBoardsPageContainer} />\r\n            <Route exact path=\"/board/:idBoard\" component={BoardPageContainer} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport { routerMiddleware, ConnectedRouter } from \"connected-react-router\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootReducer from \"./store/rootReducer\";\r\nimport rootSaga from \"./store/rootSaga\";\r\nimport services from \"./services\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport * as packageJson from \"../package.json\";\r\nimport App from \"./App\";\r\n\r\nimport \"./index.css\";\r\n\r\nexport const history = createBrowserHistory({ basename: packageJson.homepage });\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n    rootReducer(history),\r\n    composeEnhancers(applyMiddleware(sagaMiddleware, routerMiddleware(history)))\r\n);\r\nsagaMiddleware.run(rootSaga(services));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ConnectedRouter history={history}>\r\n            <App />\r\n        </ConnectedRouter>\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}